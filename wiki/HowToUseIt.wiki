
= How to use it? = 

After you have done the setup, using the classes should be very easy, the classes where designed with the method chaining in mind to make it easy to read and make it look like normal sql so is easy to understand
but if you dont like method chaining you can also use it without depends on your coding style

Lets say you want to create a query like "select * from Customer c where c.id = :id " where ":id" is a named parameter

{{{
 //First create the builder
 SqlSelectQueryBuilder queryBuilder = queryFactory.newSelectQueryBuilder();
 //Then create the query 
 queryBuilder.select("*").from("Customer c").where("c.id = :id");
 queryBuilder.setParameter("id",123);
 // the next step optional the execute() will call build() if it hasn't been call,
 // but is useful if you want to call getBuiltQuery() method
 queryBuilder.build();
 // execute the query
 List<Map<String,?>> resultList = queryBuilder.execute().getResultList();
}}}

Each type of query is divided in clauses for example the select query has select,from,where,orderBy,groupBy  each clause has one or more parts stored in a collection, which will later be joined when the build() method is called, generally each clause has two methods 

 * clauseName(part1, part2,part3): this clears the collection and adds each of the arguments as a part, it also return the querybuilder so you can easily method chain them
 for example:
 {{{
 queryBuilder.select("p.id","p.name");
 //is only important to separate the fields if you plan to remove some of them later 
 //otherwise you could use select("p.id,p.name"),this also apply for 
 //any other clause method like from() or where()
 queryBuilder.from("Person p","inner join Department d on p.departamentId=d.id"); 
 queryBuilder.where("p.salary >= :salary ");
 }}}
 * clauseName(): returns the parts collection for the clause, usually needed to add/remove/change a part of a clause
 
 for example: 
 {{{  
// we have a query to list the personnel of a company, and we want to add a search 
// by department and a salary search, also the result should be paginated
 
 public PagedResult search(QueryParameters queryParameters) {
  SqlSelectQueryBuilder queryBuilder = queryFactory.newSelectQueryBuilder();
  //basic query
  queryBuilder.select("p.id,p.name,p.salary,j.jobDescription")
  				.from("Person p","inner join Job j on p.jobId=j.id");
  
  if (queryParameters.getDepartmentNameSearch()!=null){
  	// if we have a department search add a join to department and a extra where condition 
  	queryBuilder.from().add("inner join Department d on p.departmentId=d.id");
  	queryBuilder.where().addAnd("d.name like :departmentName");
  	queryBuilder.setParameter("departmentName",queryParameters.getDepartmentNameSearch());
  }
  if (queryParameters.getSalaryGreaterThan()!=null){
  	// in this case no extra join is needed, just add an extra where condition
  	queryBuilder.where().addAnd("p.salary >= :salary");
  	queryBuilder.setParameter("salary",queryParameters.getSalaryGreaterThan());
  }
  //set the pagination limits
  queryBuilder.setFirstResults(queryParameters.getStartRow());
  queryBuilder.setMaxResults(queryParameters.getNumberOfRows());
  //execute query
  queryBuilder.build();
  if (log.isDebugEnabled()){
  	log.debug("sql:"+queryBuilder.getBuiltQuery()+" parameters:"+queryBuilder.getParameters());
  }
  List<Map<String,?>> result = queryBuilder.execute().getResultList();
  
  //calculate total count
  queryBuilder.select("count(p.id)");
  queryBuilder.clearFirstAndMaxResultLimits();
  // we can remove the inner join to the Job table because is not needed in the count
  queryBuilder.from().remove("inner join Job j on p.jobId=j.id");//be sure to use the exact same string
  //queryBuilder.from().remove(1);//we could also remove by position
  
  //execute query
  queryBuilder.build();
  Integer totalCount = (Integer) queryBuilder.execute().getUniqueResult();
  
  //now retunr your paged result
  PagedResult pagedResult = new PagedResult(result,totalCount);
  return pagedResult;
 }
 
 
 }}}
 
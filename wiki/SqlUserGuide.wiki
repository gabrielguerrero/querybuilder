#summary How it works?.
= Motivation =
	The reason for this library started some time ago when I had to make a very complex report in sql, it was around 30 possible options  the user could use to tune the results in the advanced search, the search generally had to process millions of results, I wanted to use hibernate but at the time hibernate could only return the results as list which make the million of results very heavy for the server in memory, my only option was to stream the result using sql, processing each row and store matches in another table, I tryed to use PreparedStaments but the logic became a nightmare of where, ands/or, joins plus sql doesnt have named parameters, so setting the right position of parameters in 30 optional conditions was a bit complicated and error prone.
	
    The solution to that problem was this library, at the  end I manage to reduce the execution from hours to less than 30 secs for millions of results, then in my company we start using it for any kind of query complex or not, I also did a hql version because we also heavily used hibernate.
	
= When to use this library =
This library is best suited to solve complex queries like the ones needed for reports and advanced searches

But If your project only uses sql (no Hibernate, JPA	,etc) I suggest you to use it for every query even simple ones, because internally this library uses PreparedStament for all the queries which plus the named parameters gives you sql injection protection and better performance (dbs generally precompile,cache and reuse PreparedStatements), plus using this library avoids the need of doing the very error prone try catchs to close ResultSet and PreparedStatements an SqlException are wrap in Unchecked Exception.

If you use hibernate, used this only for complex queries or you need to finely tune the perfomance of a query, for simple queries prefer using Hibernate NamedQueries just because they are validated at deploy 

= How it works? =

 In its core this lib is just a smart StringBuilder , it basically stores the parts of the queries in collections , which are later joined using a StringBuilder when you call the build method, the fact that the parts are stored in collections is what allow us to add, remove, change and reuse the query

 The lib is very simple (but very powerful), the core is made of a bit more of 10 classes, and there is like 10 classes more for each of the sql and hql version
 
= Setup =

To start using the library you just need to create an implementation of ConnectionProvider, in this class you should create a java.sql.Connection object from a connection pool, or connection per request or session, or whatever logic you use to control conections,
after you have defined this class you can create a SqlQueryFactory , the recomend way is that to create you ConnectionProvider implementation and use guice or spring or your favorite DI library to create the SqlQueryFactory, but for this example I will do the wiring manually

{{{
 public class MyConnectionProvider implements ConnectionProvider {
 	
 	public Connection get() {
 		try {
 			// here you put the logic to create,or reuse a connection from a conection pool 
 			//or any logic you have like connection per request or per session
 			.
 			.
 			.
 			return connection;
 		} catch (Exception e) {
 			throw new RuntimeException(e);
 		}
 	}
 }
 
 .
 .
 .
 // then in your code
 SqlQueryFactory queryFactory = new SqlQueryFactory(new MyConnectionProvider());
 
 // then we create the query 
 SqlSelectQueryBuilder queryBuilder = queryFactory.newSelectQueryBuilder();
 queryBuilder.select("*").from("Customer");
 queryBuilder.build();
 System.out.println(queryBuilder.getBuiltQuery());
 List<Map<String,?>> resultList = queryBuilder.execute().getResultList();
}}}	 


= How to use it? = 

After you have done the setup, using the classes should be very easy, the classes where designed with the method chaining in mind to make it easy to read and make it look like normal sql so is easy to understand
but if you dont like method chaining you can also use it without depends on your coding style

Lets say you want to create a query like "select * from Customer c where c.id = :id " where ":id" is a named parameter

{{{
 //First create the builder
 SqlSelectQueryBuilder queryBuilder = queryFactory.newSelectQueryBuilder();
 //Then create the query 
 queryBuilder.select("*").from("Customer c").where("c.id = :id");
 queryBuilder.setParameter("id",123);
 // the next step optional the execute() will call build() if it hasn't been call,
 // but is useful if you want to call getBuiltQuery() method
 queryBuilder.build();
 // execute the query
 List<Map<String,?>> resultList = queryBuilder.execute().getResultList();
}}}

Each type of query is divided in clauses for example the select query has select,from,where,orderBy,groupBy  each clause has one or more parts stored in a collection, which will later be joined when the build() method is called, generally each clause has two methods 

 * clauseName(part1, part2,part3): this clears the collection and adds each of the arguments as a part, it also return the querybuilder so you can easily method chain them
 for example:
 {{{
 queryBuilder.select("p.id","p.name");
 //is only important to separate the fields if you plan to remove some of them later 
 //otherwise you could use select("p.id,p.name"),this also apply for 
 //any other clause method like from() or where()
 queryBuilder.from("Person p","inner join Department d on p.departamentId=d.id"); 
 queryBuilder.where("p.salary >= :salary ");
 }}}
 * clauseName(): returns the parts collection for the clause, usually needed to add/remove/change a part of a clause
 
 for example: 
 {{{  
// we have a query to list the personnel of a company, and we want to add a search 
// by department and a salary search, also the result should be paginated
 
 public PagedResult search(QueryParameters queryParameters) {
  SqlSelectQueryBuilder queryBuilder = queryFactory.newSelectQueryBuilder();
  //basic query
  queryBuilder.select("p.id,p.name,p.salary,j.jobDescription")
  				.from("Person p","inner join Job j on p.jobId=j.id");
  
  if (queryParameters.getDepartmentNameSearch()!=null){
  	// if we have a department search add a join to department and a extra where condition 
  	queryBuilder.from().add("inner join Department d on p.departmentId=d.id");
  	queryBuilder.where().addAnd("d.name like :departmentName");
  	queryBuilder.setParameter("departmentName",queryParameters.getDepartmentNameSearch());
  }
  if (queryParameters.getSalaryGreaterThan()!=null){
  	// in this case no extra join is needed, just add an extra where condition
  	queryBuilder.where().addAnd("p.salary >= :salary");
  	queryBuilder.setParameter("salary",queryParameters.getSalaryGreaterThan());
  }
  //set the pagination limits
  queryBuilder.setFirstResults(queryParameters.getStartRow());
  queryBuilder.setMaxResults(queryParameters.getNumberOfRows());
  //execute query
  queryBuilder.build();
  if (log.isDebugEnabled()){
  	log.debug("sql:"+queryBuilder.getBuiltQuery()+" parameters:"+queryBuilder.getParameters());
  }
  List<Map<String,?>> result = queryBuilder.execute().getResultList();
  
  //calculate total count
  queryBuilder.select("count(p.id)");
  queryBuilder.clearFirstAndMaxResultLimits();
  // we can remove the inner join to the Job table because is not needed in the count
  queryBuilder.from().remove("inner join Job j on p.jobId=j.id");//be sure to use the exact same string
  //queryBuilder.from().remove(1);//we could also remove by position
  
  //execute query
  queryBuilder.build();
  Integer totalCount = (Integer) queryBuilder.execute().getUniqueResult();
  
  //now retunr your paged result
  PagedResult pagedResult = new PagedResult(result,totalCount);
  return pagedResult;
 }
 
 
 }}}
 